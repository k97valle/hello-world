steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: 'init'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "POC JAVA APP $_APP1"

  - name: 'maven:3.9.9-amazoncorretto-21-alpine'
    id: 'Maven Build and Test' # Renombrado para claridad
    entrypoint: 'mvn'
    # Es crucial que este paso compile el código y ejecute Jacoco para generar el reporte
    args: ['clean', 'package'] # 'clean' es bueno para asegurar un build limpio, 'package' compila, prueba y genera cobertura



  - name: 'sonarsource/sonar-scanner-cli:latest' # Imagen oficial del SonarScanner CLI
    id: 'SonarCloud Analysis with CLI'
    entrypoint: 'sonar-scanner'
    args:
      - '-X' # Para logs de depuración
      # El SonarScanner CLI leerá sonar-project.properties por defecto.
      # El token se pasará como variable de entorno.
      # Si quisieras pasar propiedades aquí, también usarías -D, ej:
      # - '-Dsonar.projectKey=k97valle_hello-world' # Aunque es mejor en el archivo de propiedades
    env:
      - 'SONAR_TOKEN=${_SONAR_LOGIN_TOKEN}' # El CLI usa SONAR_TOKEN o sonar.login
    secretEnv: ['_SONAR_LOGIN_TOKEN']
    allowFailure: true

  # ... (resto de los pasos de Docker y Cloud Deploy sin cambios) ...

availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/SONAR_LOGIN_TOKEN/versions/latest
    env: '_SONAR_LOGIN_TOKEN'

timeout: 1200s # Aumentado por si el debug es largo
