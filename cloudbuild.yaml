steps:
  - name: 'gcr.io/cloud-builders/docker'
    id: 'init'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "POC JAVA APP $_APP1"

  # Paso 1: Construir con Maven, generar reporte Jacoco Y CREAR EL DIRECTORIO DE TRABAJO PARA SONAR
  - name: 'maven:3.9.9-amazoncorretto-21-alpine'
    id: 'Maven Build Create Sonar Workdir and Jacoco Report'
    entrypoint: 'bash' # Cambiamos a bash para ejecutar múltiples comandos
    args:
      - '-c'
      - |
        echo "Ejecutando Maven clean package..."
        mvn clean package # Compila, ejecuta tests, genera Jacoco, empaqueta
        echo "Creando directorio de trabajo para SonarScanner CLI en target/sonar-cli-work..."
        mkdir -p target/sonar-cli-work
        echo "Directorio target/sonar-cli-work creado."



  - name: 'sonarsource/sonar-scanner-cli:latest' # Imagen oficial del SonarScanner CLI
    id: 'SonarCloud Analysis with CLI'
    user: 'root'
    entrypoint: 'sonar-scanner'
    args:
      - '-X'
      - '-Dsonar.working.directory=/workspace/target/sonar-cli-work'
      #- '-Dsonar.login=${SONAR_TOKEN}' # Pasar el token aquí # Para logs de depuración
      # El SonarScanner CLI leerá sonar-project.properties por defecto.
      # El token se pasará como variable de entorno.
      # Si quisieras pasar propiedades aquí, también usarías -D, ej:
      # - '-Dsonar.projectKey=k97valle_hello-world' # Aunque es mejor en el archivo de propiedades
    #env:
    #  - 'SONAR_TOKEN=${_SONAR_LOGIN_TOKEN}' # El CLI usa SONAR_TOKEN o sonar.login
    #secretEnv: ['_SONAR_LOGIN_TOKEN']
    allowFailure: true

  - name: 'gcr.io/cloud-builders/docker'
    id: 'create image'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Construyendo imagen de docker"
        docker build -t $_REGISTRY/$_PROJECT/$_REPOSITORY_NAME/$_MODULE:latest .

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push image'
    args: ['push', '$_REGISTRY/$_PROJECT/$_REPOSITORY_NAME/$_MODULE:latest']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Substituir template'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
        apt-get update && apt-get install -y --no-install-recommends gettext-base && rm -rf /var/lib/apt/lists/*
        export REGISTRY=$_REGISTRY
        export PROJECT=$_PROJECT
        export REPOSITORY_NAME=$_REPOSITORY_NAME
        export MODULE=$_MODULE
        export PROJECT_ID=$_PROJECT # Asumiendo que _PROJECT_ID es lo mismo que _PROJECT para los templates

        envsubst < deploy/manifest_template.yaml > deploy/manifest.yaml
        envsubst < deploy/target_template.yaml > deploy/target.yaml
        envsubst < deploy/pipeline_template.yaml > deploy/pipeline.yaml
        envsubst < deploy/skaffold_template.yaml > deploy/skaffold.yaml

        cat deploy/manifest.yaml

  - name: 'google/cloud-sdk:latest'
    id: Ejecutar Cloud Deploy
    entrypoint: 'sh'
    args:
    - -xe
    - -c
    - |
      gcloud config set deploy/region $_REGION
      gcloud deploy apply --file deploy/pipeline.yaml
      gcloud deploy apply --file deploy/target.yaml
      gcloud deploy releases create $_MODULE-$SHORT_SHA --delivery-pipeline=$_MODULE --skaffold-file=deploy/skaffold.yaml

#availableSecrets:
#  secretManager:
#  - versionName: projects/$PROJECT_ID/secrets/SONAR_LOGIN_TOKEN/versions/latest
#    env: '_SONAR_LOGIN_TOKEN'

timeout: 1200s # Aumentado por si el debug es largo
